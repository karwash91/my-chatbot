name: Deploy my-chatbot

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend deps
        working-directory: frontend
        run: npm ci

      - name: Package Lambdas
        run: |
          cd lambdas
          zip -r upload.zip upload.py
          zip -r ingest.zip ingest.py
          zip -r chat.zip chat.py
          cd ..

      # --- Terraform Deploy ---
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform -chdir=terraform init -backend-config="bucket=karwash91-tfstate" -backend-config="key=chatbot/terraform.tfstate" -backend-config="region=us-east-1"

      - name: Terraform Apply (infra only)
        run: terraform -chdir=terraform apply -target=aws_s3_bucket.docs_bucket -target=aws_s3_bucket.frontend_bucket -auto-approve

      - name: Terraform Apply (all)
        run: terraform -chdir=terraform apply -auto-approve

      - name: Generate frontend .env
        run: |
          echo "VITE_COGNITO_CLIENT_ID=$(terraform output -raw cognito_client_id)" > frontend/.env
          echo "VITE_COGNITO_DOMAIN=$(terraform output -raw cognito_domain).auth.${AWS_REGION}.amazoncognito.com" >> frontend/.env
          echo "VITE_COGNITO_ISSUER=$(terraform output -raw cognito_issuer_url)" >> frontend/.env
          echo "VITE_API_BASE_URL=$(terraform output -raw api_invoke_url)" >> frontend/.env

      - name: Debug .env contents
        run: |
          echo "---- frontend/.env ----"
          cat frontend/.env
          echo "-----------------------"

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Sync frontend build to S3
        run: |
          aws s3 sync frontend/dist s3://$(terraform output -raw frontend_bucket) --delete

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $(terraform output -raw frontend_cdn_id) \
            --paths "/*"

      - name: Upload docs to API
        run: |
          API_URL=$(terraform output -raw api_invoke_url)/upload
          for file in docs/*.txt; do
            echo "Uploading $file ..."
            CONTENT=$(cat "$file" | jq -Rs .)
            curl -X POST "$API_URL" \
              -H "Content-Type: application/json" \
              -d "{\"filename\":\"$(basename "$file")\", \"content\":$CONTENT}"
          done

  destroy:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform -chdir=terraform init -backend-config="bucket=karwash91-tfstate" -backend-config="key=chatbot/terraform.tfstate" -backend-config="region=us-east-1"

      - name: Terraform Destroy
        run: terraform -chdir=terraform destroy -auto-approve
